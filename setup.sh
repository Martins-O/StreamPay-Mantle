#!/bin/bash

# StreamPay Mantle - Complete Setup Script
# This script sets up the entire StreamPay Mantle project from scratch

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ASCII Art Logo
echo -e "${BLUE}"
cat << "EOF"
 ____  _                            ____
/ ___|| |_ _ __ ___  __ _ _ __ ___   |  _ \ __ _ _   _
\___ \| __| '__/ _ \/ _` | '_ ` _ \  | |_) / _` | | | |
 ___) | |_| | |  __/ (_| | | | | | |  __/ (_| | |_| |
|____/ \__|_|  \___|\__,_|_| |_| |_|_|   \__,_|\__, |
                                               |___/
                    Mantle L2 Edition
EOF
echo -e "${NC}"

echo -e "${GREEN}🌊 StreamPay Mantle Complete Setup${NC}"
echo "======================================"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to prompt for user input
prompt_user() {
    read -p "$1: " input
    echo "$input"
}

# Function to create .env file with user input
create_env_file() {
    local env_file="$1"
    local template_file="$2"

    echo -e "${YELLOW}Creating $env_file...${NC}"

    if [ -f "$template_file" ]; then
        cp "$template_file" "$env_file"
    else
        touch "$env_file"
    fi

    echo "# Generated by setup script on $(date)" >> "$env_file"
}

echo -e "${YELLOW}📋 Checking prerequisites...${NC}"

# Check for required tools
MISSING_TOOLS=()

if ! command_exists node; then
    MISSING_TOOLS+=("Node.js 18+")
fi

if ! command_exists npm; then
    MISSING_TOOLS+=("npm")
fi

if ! command_exists git; then
    MISSING_TOOLS+=("git")
fi

if ! command_exists forge; then
    echo -e "${YELLOW}Installing Foundry...${NC}"
    curl -L https://foundry.paradigm.xyz | bash
    source ~/.bashrc
    foundryup
fi

if [ ${#MISSING_TOOLS[@]} -ne 0 ]; then
    echo -e "${RED}❌ Missing required tools:${NC}"
    for tool in "${MISSING_TOOLS[@]}"; do
        echo "  - $tool"
    done
    echo -e "${YELLOW}Please install missing tools and run this script again.${NC}"
    exit 1
fi

echo -e "${GREEN}✅ All prerequisites satisfied${NC}"

# Setup contracts
echo -e "${YELLOW}🔧 Setting up smart contracts...${NC}"
cd contracts

# Install contract dependencies
echo "Installing Foundry dependencies..."
forge install --no-commit

# Create contracts .env file
echo -e "${YELLOW}⚙️ Configuring contract environment...${NC}"
if [ ! -f .env ]; then
    echo "We need to configure your deployment settings."
    echo -e "${RED}⚠️  Never commit your private key to git!${NC}"

    PRIVATE_KEY=$(prompt_user "Enter your private key (without 0x prefix)")
    MANTLESCAN_API_KEY=$(prompt_user "Enter your Mantlescan API key (optional)")

    cat > .env << EOF
# Deployment Configuration
PRIVATE_KEY=$PRIVATE_KEY
MANTLESCAN_API_KEY=$MANTLESCAN_API_KEY

# RPC URLs
MANTLE_TESTNET_RPC=https://rpc.testnet.mantle.xyz
MANTLE_MAINNET_RPC=https://rpc.mantle.xyz

# Contract Addresses (filled after deployment)
STREAM_MANAGER_ADDRESS=
STREAM_VAULT_ADDRESS=
MOCK_USDT_ADDRESS=
EOF

    echo -e "${GREEN}✅ Contract environment configured${NC}"
else
    echo -e "${GREEN}✅ Contract environment already exists${NC}"
fi

# Run tests
echo -e "${YELLOW}🧪 Running contract tests...${NC}"
forge test

if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Contract tests failed. Please check the code.${NC}"
    exit 1
fi

echo -e "${GREEN}✅ All contract tests passed${NC}"

# Ask if user wants to deploy now
read -p "Do you want to deploy contracts to Mantle testnet now? (y/N): " deploy_now

if [[ $deploy_now =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}🚀 Deploying contracts...${NC}"

    # Make scripts executable
    chmod +x deploy.sh
    chmod +x verify.sh

    # Deploy contracts
    ./deploy.sh

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Contracts deployed successfully${NC}"

        # Save deployment info
        if [ -f deployment.env ]; then
            cat deployment.env >> .env
            echo -e "${GREEN}✅ Contract addresses saved to .env${NC}"
        fi
    else
        echo -e "${RED}❌ Contract deployment failed${NC}"
        echo -e "${YELLOW}You can deploy later using: cd contracts && ./deploy.sh${NC}"
    fi
else
    echo -e "${YELLOW}⏭️ Skipping contract deployment${NC}"
    echo -e "${YELLOW}You can deploy later using: cd contracts && ./deploy.sh${NC}"
fi

# Setup frontend
echo -e "${YELLOW}🎨 Setting up frontend...${NC}"
cd ../frontend

# Install frontend dependencies
echo "Installing Node.js dependencies..."
npm install

if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Frontend dependency installation failed${NC}"
    exit 1
fi

# Create frontend .env file
echo -e "${YELLOW}⚙️ Configuring frontend environment...${NC}"
if [ ! -f .env.local ]; then
    echo "We need to configure your frontend settings."

    WALLETCONNECT_PROJECT_ID=$(prompt_user "Enter your WalletConnect Project ID (get from cloud.walletconnect.com)")

    cat > .env.local << EOF
# Frontend Environment Variables

# WalletConnect Project ID
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=$WALLETCONNECT_PROJECT_ID

# Contract Addresses (will be populated after deployment)
NEXT_PUBLIC_STREAM_MANAGER_ADDRESS=
NEXT_PUBLIC_MOCK_USDT_ADDRESS=

# RPC URLs
NEXT_PUBLIC_MANTLE_TESTNET_RPC=https://rpc.testnet.mantle.xyz
EOF

    # Copy contract addresses if they exist
    if [ -f ../contracts/deployment.env ]; then
        echo "" >> .env.local
        echo "# Deployed Contract Addresses" >> .env.local

        # Transform contract addresses for frontend
        sed 's/STREAM_MANAGER_ADDRESS=/NEXT_PUBLIC_STREAM_MANAGER_ADDRESS=/' ../contracts/deployment.env >> .env.local
        sed 's/MOCK_USDT_ADDRESS=/NEXT_PUBLIC_MOCK_USDT_ADDRESS=/' ../contracts/deployment.env >> .env.local
    fi

    echo -e "${GREEN}✅ Frontend environment configured${NC}"
else
    echo -e "${GREEN}✅ Frontend environment already exists${NC}"
fi

# Build frontend
echo -e "${YELLOW}🏗️ Building frontend...${NC}"
npm run build

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Frontend built successfully${NC}"
else
    echo -e "${YELLOW}⚠️ Frontend build completed with warnings${NC}"
fi

# Final setup summary
cd ..
echo ""
echo -e "${GREEN}🎉 StreamPay Mantle Setup Complete!${NC}"
echo "============================================"

echo -e "${BLUE}📁 Project Structure:${NC}"
echo "  📂 contracts/     - Smart contracts and deployment scripts"
echo "  📂 frontend/      - Next.js web application"
echo "  📂 docs/          - Documentation and guides"

echo -e "${BLUE}🚀 Next Steps:${NC}"

if [ ! -f contracts/deployment.env ]; then
    echo "  1. Deploy contracts: cd contracts && ./deploy.sh"
    echo "  2. Update frontend config with contract addresses"
fi

echo "  3. Start development server: cd frontend && npm run dev"
echo "  4. Open http://localhost:3000 in your browser"
echo "  5. Connect your wallet and start streaming!"

echo -e "${BLUE}📚 Documentation:${NC}"
echo "  📖 README.md           - Project overview and quick start"
echo "  📖 docs/ARCHITECTURE.md - Technical architecture"
echo "  📖 docs/DEPLOYMENT.md   - Deployment guide"
echo "  📖 docs/DEMO.md         - Demo walkthrough"

echo -e "${BLUE}🔗 Useful Links:${NC}"
echo "  🌐 Mantle Testnet Faucet: https://faucet.testnet.mantle.xyz"
echo "  🔍 Mantle Explorer: https://explorer.testnet.mantle.xyz"
echo "  📋 WalletConnect: https://cloud.walletconnect.com"

echo -e "${BLUE}💡 Quick Commands:${NC}"
echo "  📜 Run tests:      cd contracts && forge test"
echo "  🚀 Deploy:         cd contracts && ./deploy.sh"
echo "  💻 Start frontend: cd frontend && npm run dev"
echo "  📖 Read docs:      cat docs/DEMO.md"

echo ""
echo -e "${GREEN}Happy streaming! 🌊${NC}"

# Check if git repo and offer to initialize
if [ ! -d .git ]; then
    read -p "Initialize git repository? (y/N): " init_git
    if [[ $init_git =~ ^[Yy]$ ]]; then
        git init

        # Create .gitignore
        cat > .gitignore << EOF
# Dependencies
node_modules/
package-lock.json

# Environment files
.env
.env.local
.env.production

# Build outputs
out/
.next/
dist/
build/

# Logs
*.log

# Cache
.cache/
cache/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Foundry
lib/
!contracts/lib/forge-std
!contracts/lib/openzeppelin-contracts

# Deployment
deployment.env
EOF

        git add .
        git commit -m "Initial commit: StreamPay Mantle setup"
        echo -e "${GREEN}✅ Git repository initialized${NC}"
    fi
fi